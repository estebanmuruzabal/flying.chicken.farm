{"version":3,"sources":["modules/state-mgmt/core/actions.ts","modules/state-mgmt/core/epics.ts","modules/state-mgmt/core/index.ts","modules/state-mgmt/auth/actions.ts","modules/state-mgmt/auth/state.ts","modules/state-mgmt/auth/reducer.ts","modules/state-mgmt/auth/epics.ts","modules/state-mgmt/auth/index.ts","modules/views/login/styles.ts","modules/views/login/Login.tsx","modules/views/login/LoginContainer.ts"],"names":["ActionType","actions","epicError","error","type","EPIC_ERROR","payload","epics","action$","state$","deps","pipe","ofType","mergeMap","action","of","tap","logger","switchMap","empty","coreState","forEach","epic","EpicRegistry","addEpic","initialState","currentUserId","start","username","password","START","success","loginResponse","SUCCESS","reducer","state","id","apiService","login","map","res","history","push","catchError","authState","ReducerRegistry","register","StyleSheet","create","loginContainer","height","display","alignItems","loginForm","width","flexDirection","loginInput","marginBottom","loginButton","memo","useState","setState","onLogin","useCallback","setUsername","event","target","value","setPassword","className","css","styles","key","data-testid","onChange","placeholder","autoComplete","onClick","connect","dispatch","Login"],"mappings":"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","file":"static/js/5.79971928.chunk.js","sourcesContent":["export enum ActionType {\n  EPIC_ERROR = '[core] epic error'\n}\n\nexport const actions = {\n  epicError: (error: any) => ({ type: ActionType.EPIC_ERROR, payload: { error } })\n};\n","import { Epic, ofType } from 'redux-observable';\nimport { of, empty } from 'rxjs';\nimport { tap, mergeMap, switchMap } from 'rxjs/operators';\n\nimport { IAction, IRootState, IEpicDependencies } from '../rootState';\nimport { ActionType } from './actions';\n\nexport const handleErrors: Epic<IAction, IAction, IRootState, IEpicDependencies> = (action$, state$, deps) =>\n  action$.pipe(\n    ofType(ActionType.EPIC_ERROR),\n    mergeMap(action =>\n      of(action).pipe(\n        tap(({ payload }) => deps.logger.error(payload.error)),\n        switchMap(() => empty())\n      )\n    )\n  );\n\nexport const epics = [handleErrors];\n","import { EpicRegistry } from '../EpicRegistry';\nimport { actions, ActionType } from './actions';\nimport { epics } from './epics';\n\nexport const coreState = { actions, ActionType, epics };\n\nepics.forEach(epic => EpicRegistry.addEpic(epic));\n","import { GeneralModel } from '../../models';\n\nexport enum ActionType {\n  START = '[auth] start',\n  SUCCESS = '[auth] success'\n}\n\nexport const actions = {\n  start: (username: string, password: string) => ({ type: ActionType.START, payload: { username, password } }),\n  success: (loginResponse: GeneralModel.ILoginResponse) => ({ type: ActionType.SUCCESS, payload: { loginResponse } })\n};\n","export interface IState {\n  currentUserId: string;\n}\n\nexport const initialState: IState = {\n  currentUserId: null\n};\n","import { ActionType } from './actions';\nimport { initialState, IState } from './state';\n\nexport const reducer = (state: IState = initialState, { type, payload }: { type: ActionType; payload?: any }): IState => {\n  switch (type) {\n    case ActionType.SUCCESS:\n      return { ...state, currentUserId: payload.loginResponse.id };\n    default:\n      return state;\n  }\n};\n","import { Epic, ofType } from 'redux-observable';\nimport { of } from 'rxjs';\nimport { mergeMap, map, catchError, tap } from 'rxjs/operators';\n\nimport { IAction, IRootState, IEpicDependencies } from '../rootState';\nimport { actions, ActionType } from './actions';\nimport { coreState } from '../core';\n\nexport const authStart: Epic<IAction, IAction, IRootState, IEpicDependencies> = (action$, state$, deps) =>\n  action$.pipe(\n    ofType(ActionType.START),\n    mergeMap(action =>\n      of(action).pipe(\n        mergeMap(({ payload }) => deps.apiService.login(payload)),\n        map(res => actions.success(res)),\n        tap(() => deps.history.push('/todo-list')),\n        catchError(error => of(coreState.actions.epicError(error)))\n      )\n    )\n  );\n\nexport const epics = [authStart];\n","import { ReducerRegistry } from '../ReducerRegistry';\nimport { EpicRegistry } from '../EpicRegistry';\nimport { initialState } from './state';\nimport { actions, ActionType } from './actions';\nimport { reducer } from './reducer';\nimport { epics } from './epics';\n\nexport const authState = { initialState, reducer, actions, ActionType, epics };\n\nReducerRegistry.register('auth', reducer);\nepics.forEach(epic => EpicRegistry.addEpic(epic));\n","import { StyleSheet } from 'aphrodite/no-important';\n\nexport default StyleSheet.create({\n  loginContainer: {\n    height: '100%',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  loginForm: {\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column' as 'column',\n    alignItems: 'center'\n  },\n  loginInput: {\n    marginBottom: '1rem'\n  },\n  loginButton: {\n    width: '50%'\n  }\n});\n","import React, { memo, useCallback, useState } from 'react';\nimport { css } from 'aphrodite/no-important';\n\nimport styles from './styles';\n\nexport interface ILoginProps {\n  login: (username: string, password: string) => void;\n}\n\nexport interface ILoginState {\n  username: string;\n  password: string;\n}\n\nconst Login = ({ login }: ILoginProps) => {\n  const [state, setState] = useState<ILoginState>({ username: '', password: '' });\n\n  const onLogin = useCallback(() => login(state.username, state.password), [state, login]);\n\n  const setUsername = useCallback((event: React.ChangeEvent<HTMLInputElement>) => setState({ ...state, username: event.target.value }), [state, setState]);\n\n  const setPassword = useCallback((event: React.ChangeEvent<HTMLInputElement>) => setState({ ...state, password: event.target.value }), [state, setState]);\n\n  return (\n    <div className={`${css(styles.loginContainer)} container`} key=\"Login\">\n      <form className={`${css(styles.loginForm)} form-group`}>\n        <input\n          className={`${css(styles.loginInput)} form-control`}\n          data-testid=\"login-username\"\n          onChange={setUsername}\n          value={state.username}\n          placeholder=\"username\"\n          type=\"text\"\n          autoComplete=\"email\"\n        />\n        <input\n          className={`${css(styles.loginInput)} form-control`}\n          onChange={setPassword}\n          value={state.password}\n          data-testid=\"login-password\"\n          placeholder=\"password\"\n          type=\"password\"\n          autoComplete=\"password\"\n        />\n        <button data-testid=\"login-btn\" className={`${css(styles.loginButton)} btn btn-primary`} onClick={onLogin} type=\"button\">\n          Login\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Login);\n","import { connect } from 'react-redux';\n\nimport { IRootState } from '../../state-mgmt/rootState';\nimport { authState } from '../../state-mgmt/auth';\nimport Login from './Login';\n\nexport const mapStateToProps = (state: IRootState) => ({\n  //\n});\n\nexport const mapDispatchToProps = dispatch => ({\n  login: (username: string, password: string) => dispatch(authState.actions.start(username, password))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"],"sourceRoot":""}