{"version":3,"sources":["modules/state-mgmt/ReducerRegistry.ts","modules/state-mgmt/EpicRegistry.ts","constants/env.ts","modules/services/ApiService.ts","modules/services/Logger.ts","modules/state-mgmt/store.ts","modules/AppRoot.tsx","registerServiceWorker.ts","index.tsx"],"names":["ReducerRegistry","reducers","stateName","reducer","emitChange","getReducers","listener","initRedux","EpicRegistry","epic","epic$","next","Subject","rootEpic","args","pipe","mergeMap","config","process","ENV","ENVIRONMENT","REACT_APP_ENV","IS_DEV","IS_TEST","IS_QA","IS_PROD","API","URL","REACT_APP_API_URL","MAX_RETRIES","RETRY_TIMEOUT","ENTITY","AUTH","TODO","ApiService","http","ajax","apiUrl","maxRetries","body","of","id","token","name","description","path","options","method","headers","Accept","this","parseBody","url","map","data","response","retry","JSON","stringify","Logger","shouldLog","printer","console","log","logMethod","info","warn","error","table","level","history","createBrowserHistory","epicMiddleware","createEpicMiddleware","dependencies","apiService","logger","withDevtools","composeWithDevTools","maxAge","shouldCatchErrors","trace","store","createStore","combineReducers","router","connectRouter","applyMiddleware","routerMiddleware","setChangeListener","replaceReducer","run","Login","lazy","TodoList","App","exact","render","fallback","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","ReactDOM","document","getElementById","toString","origin","addEventListener","fetch","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a638658d.chunk.js","sourcesContent":["import { Reducer, ReducersMapObject } from 'redux';\n\nexport class ReducerRegistry {\n  private static emitChange: any = null;\n  private static reducers: { [stateName: string]: Reducer } = { initRedux: () => true };\n\n  public static getReducers(): ReducersMapObject {\n    return { ...ReducerRegistry.reducers };\n  }\n\n  public static register(stateName: string, reducer: Reducer): void {\n    ReducerRegistry.reducers = { ...ReducerRegistry.reducers, [stateName]: reducer };\n    if (ReducerRegistry.emitChange) ReducerRegistry.emitChange(ReducerRegistry.getReducers());\n  }\n\n  public static setChangeListener(listener: (reducers: ReducersMapObject) => void): void {\n    ReducerRegistry.emitChange = listener;\n  }\n}\n","import { Subject } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nexport class EpicRegistry {\n  private static epic$ = new Subject();\n  public static rootEpic: any = (...args) => EpicRegistry.epic$.pipe(mergeMap((epic: any) => epic(...args)));\n\n  public static addEpic(epic) {\n    EpicRegistry.epic$.next(epic);\n  }\n}\n","const config = process.env;\n\nexport const ENV = {\n  ENVIRONMENT: config.REACT_APP_ENV,\n  IS_DEV: config.REACT_APP_ENV === 'development',\n  IS_TEST: config.REACT_APP_ENV === 'test',\n  IS_QA: config.REACT_APP_ENV === 'qa',\n  IS_PROD: config.REACT_APP_ENV === 'stage' || config.REACT_APP_ENV === 'production',\n  API: {\n    URL: config.REACT_APP_API_URL,\n    MAX_RETRIES: 3,\n    RETRY_TIMEOUT: 1000,\n    ENTITY: {\n      AUTH: 'auth',\n      TODO: 'todo'\n    }\n  }\n};\n","import { Observable, of } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { map, retry } from 'rxjs/operators';\n\nimport { ENV } from '../../constants';\nimport { GeneralModel, TodoModel } from '../models';\n\nexport class ApiService {\n  private http = ajax;\n  private apiUrl: string = ENV.API.URL;\n  private maxRetries: number = ENV.API.MAX_RETRIES;\n\n  public login(body: { username: string; password: string }): Observable<GeneralModel.ILoginResponse> {\n    // return this.request<GeneralModel.ILoginResponse>(`${ENV.API.ENTITY.AUTH}/login`, { method: 'POST', body });\n    return of({ id: 'fake-id', token: 'fake-token' });\n  }\n\n  public getTodoList(): Observable<TodoModel.ITodo[]> {\n    return of([\n      { id: '1', name: 'first', description: 'first todo on the list' },\n      { id: '2', name: 'second', description: 'second todo on the list' },\n      { id: '3', name: 'third', description: 'third todo on the list' }\n    ]);\n  }\n\n  public request<T = any>(path: string, options: { method: string; body?: any; headers?: { [key: string]: any } } = { method: 'GET' }): Observable<T> {\n    options.headers = { 'Content-Type': 'application/json', Accept: 'application/json' };\n    if (options.body) options.body = this.parseBody(options.body);\n    return this.http({ url: `${this.apiUrl}/${path}`, ...options }).pipe(\n      map(data => data.response as T),\n      retry(this.maxRetries)\n    );\n  }\n\n  private parseBody(body: { [key: string]: any }): string {\n    try {\n      return JSON.stringify(body);\n    } catch {\n      /* istanbul ignore next line */\n      return '';\n    }\n  }\n}\n","import { ENV } from '../../constants';\n\nexport abstract class Logger {\n  private static shouldLog = !ENV.IS_TEST;\n  private static printer = console;\n\n  public static log = (...args) => Logger.logMethod('log', ...args);\n  public static info = (...args) => Logger.logMethod('info', ...args);\n  public static warn = (...args) => Logger.logMethod('warn', ...args);\n  public static error = (...args) => Logger.logMethod('error', ...args); /** using console.error crashes using devtools */\n  public static table = (...args) => Logger.logMethod('table', ...args);\n\n  private static logMethod = (level, ...args) => {\n    if (!Logger.shouldLog) return;\n    Logger.printer[level](...args);\n  };\n}\n","import { combineReducers, createStore, applyMiddleware, Store } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createBrowserHistory } from 'history';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\n\nimport { ReducerRegistry } from './ReducerRegistry';\nimport { EpicRegistry } from './EpicRegistry';\nimport { IEpicDependencies, IRootState } from './rootState';\nimport { ApiService } from '../services/ApiService';\nimport { Logger } from '../services/Logger';\n\nconst history = createBrowserHistory();\n\nconst epicMiddleware = createEpicMiddleware({\n  dependencies: {\n    history,\n    apiService: new ApiService(),\n    logger: Logger\n  } as IEpicDependencies\n});\n\nconst withDevtools = composeWithDevTools({ maxAge: 20, shouldCatchErrors: true, trace: true });\n\nconst store: Store = createStore<IRootState, any, any, any>(\n  combineReducers({ ...ReducerRegistry.getReducers(), router: connectRouter(history) as any }) as any,\n  {} as any,\n  withDevtools(applyMiddleware(routerMiddleware(history), epicMiddleware))\n);\n\nReducerRegistry.setChangeListener(reducers => store.replaceReducer(combineReducers({ ...reducers, router: connectRouter(history) as any })));\n\nexport { store, history };\n\nepicMiddleware.run(EpicRegistry.rootEpic);\n","import React, { Suspense, lazy } from 'react';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Switch, Route } from 'react-router';\n\nimport { store, history } from './state-mgmt/store';\n\nconst Login = lazy(() => import('./views/login'));\nconst TodoList = lazy(() => import('./views/TodoList'));\n\nexport default class App extends React.Component {\n  public render() {\n    return (\n      <Provider store={store}>\n        <ConnectedRouter history={history}>\n          <Switch>\n            <Route\n              exact={true}\n              path=\"/\"\n              render={() => (\n                <Suspense fallback={<p>loading</p>}>\n                  <Login />\n                </Suspense>\n              )}\n            />\n            <Route\n              exact={true}\n              path=\"/todo-list\"\n              render={() => (\n                <Suspense fallback={<p>loading</p>}>\n                  <TodoList />\n                </Suspense>\n              )}\n            />\n          </Switch>\n        </ConnectedRouter>\n      </Provider>\n    );\n  }\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.toString());\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://goo.gl/SC7cgQ');\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type')!.indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport AppRoot from './modules/AppRoot';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<AppRoot />, document.getElementById('root') as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}